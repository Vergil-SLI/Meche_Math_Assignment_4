% For implementation in planetary_motion_implementation (didn't edit to avoid github merge conflicts): 
% local_truncation_error(t_ref, hspan, @rate_func_in)

% Need to define t_ref and hspan in planetary_motion_implementation:
% t_ref = 0.1;
% hspan = [-5, -1, 100];

% % Plot Midpoint vs. Analytical throughout different time step sizes
%     figure()
%     h_ref = 0.1; %reset back to 0.1
%     [t_list, x_list, h_avg, num_evals] = backward_euler_fixed_step_integration_assignment_4(@rate_func01, tspan, X0, h_ref); % re-claim parameters with reset h_ref
%     plot(linspace(tspan(1), tspan(2), (tspan(2)/h_avg)), X,'b'); % Plot analytical solution over time
%     hold on
%     for i = 1:4
%         [t_mid_list,x_list_expmid,h_avg_expmid, num_evals_expmid] = explicit_midpoint_fixed_step_integration_assignment_4(@rate_func01,tspan,X0,h_ref);
%         plot(t_mid_list, x_list_expmid(:, 1), '.', 'MarkerSize', 20); % Plot Explict Midpoint step integration over time
%         h_ref = h_ref + 0.2;
%         hold on;
%     end
%     ylim([-4, 4]);
%     title("Explicit midpoint step integration over time for different time step sizes");
%     xlabel("Time");
%     ylabel("X(t)");
%     legend("Analytical Solution","0.1 timestep", "0.3 timestep", "0.5 timestep", "0.7 timestep");
%     hold off

% Estimate p-value
    % [expmid_p,expmid_k] = loglog_fit(h_list,expmid_error_list);
    % expmid_y_data = expmid_k.*((h_list.^expmid_p));
    % fprintf("Local explicit Midpoint p-value: ");
    % disp(expmid_p);

function [h_list,analytical_difference,expmid_error_list] = local_truncation_error_assignment_4(t_ref, hspan, test_function)
    orbit_params = struct();
    orbit_params.m_sun = 1;
    orbit_params.m_planet = 1;
    orbit_params.G = 40;
    x0 = 8;
    y0 = 0;
    dxdt0 = 0;
    dydt0 = 1.5;
    
    %V0 = [x(0); y(0); dx/dt(0); dy/dt(0)];
    V0 = [x0; y0; dxdt0; dydt0];
    h_list = logspace(hspan(1), hspan(2), hspan(3));
    x_approx_expmid_list = []; % Explicit Midpoint

    XA = compute_planetary_motion(t_ref, V0, orbit_params);
    for i = 1:(length(h_list))
        
        [x_approx_expmid,~] = explicit_midpoint_step_assignment_4(test_function,t_ref, XA, h_list(i));
        x_approx_expmid_list(:,end+1) = x_approx_expmid;
        %x_analytical_list(end+1) = compute_planetary_motion(t_ref+h_list(i));

    end
    %analytical_difference = abs(x_analytical_list - XA); % |X(t + h) âˆ’ X(t)|
    expmid_error_list = abs(x_approx_expmid_list - x_analytical_list);

end